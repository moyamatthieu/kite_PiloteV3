; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
monitor_speed = 115200
upload_speed = 921600

build_flags = 
	-Os
	-DCORE_DEBUG_LEVEL=1
	-DELEGANTOTA_USE_ASYNC_WEBSERVER=1
	-DCONFIG_ESP_HEAP_TASK_TRACKING=1
	-DFREERTOS_HEAP_TRACKING=1
	-DFREERTOS_ASSERT_ON_UNTESTED_FUNCTION=0
	-DconfigUSE_TRACE_FACILITY=1
	-DconfigUSE_STATS_FORMATTING_FUNCTIONS=1
	-DMEMORY_OPTIMIZATION_ENABLED=1
	-DLOG_LEVEL=3
	-DTIME_CRITICAL=1
	-DHAVE_CONFIG_H
	-DARDUINO_ARCH_ESP32
	-Iinclude/hardware/io

; Mode de programmation de la mémoire flash (DIO = Dual I/O)
board_build.flash_mode = dio

; Fréquence de la mémoire flash en Hz (80 MHz)
board_build.f_flash = 80000000L

; Fréquence du CPU en Hz (240 MHz)
board_build.f_cpu = 240000000L

; Dépendances du projet (bibliothèques externes)
lib_deps = 
    ; Permet les mises à jour OTA (Over The Air) de manière élégante
    ayushsharma82/ElegantOTA @ ^3.1.7
    ; Pilote pour écran LCD I2C
    marcoschwartz/LiquidCrystal_I2C @ ^1.1.4
    ; Serveur Web asynchrone pour ESP32
    https://github.com/me-no-dev/ESPAsyncWebServer.git
    ; Gestion des communications TCP asynchrones
    https://github.com/me-no-dev/AsyncTCP.git
    ; Bibliothèque pour contrôler les servomoteurs
    https://github.com/madhephaestus/ESP32Servo.git
    ; Bibliothèque pour contrôler les moteurs pas à pas avec accélération
    https://github.com/gin66/FastAccelStepper.git
    ; Bibliothèque pour la gestion des données JSON
    bblanchon/ArduinoJson@^7.4.1
    ; Bibliothèque pour le capteur MPU6050
    tockn/MPU6050_tockn@^1.5.2
